<apex:page controller="cg.SDriveManualAuthorizationController" action="{!validateActivation}" id="manualActivationPage">
<apex:styleSheet value="{!URLFOR($Resource.cg__YuiScripts, 'assets/skins/sam/skin.css')}" />
<apex:stylesheet value="{!URLFOR($Resource.cg__YuiScripts,'menu/assets/skins/sam/menu.css')} "/>
 
<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts, 'yahoo-dom-event/yahoo-dom-event.js')}" />
<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts, 'container/container-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts, 'animation/animation-min.js')}" />

<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts,'yahoo/yahoo-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts,'event/event-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts,'connection/connection_core-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.cg__YuiScripts,'menu/menu-min.js')}" />
 
<apex:includeScript value="/soap/ajax/15.0/connection.js"/>
<apex:includeScript value="/soap/ajax/15.0/apex.js"/>
<apex:form rendered="{!!isAdmin}">
    <apex:pageBlock >
        <apex:PageMessage summary="Content cannot be displayed: You do not have sufficient privileges to access the S-Drive Manual Authorization Page. Please contact your administrator for further information." severity="warning" strength="3"/>
        <apex:pageBlockButtons >
            <apex:commandButton action="{!goToHomePage}" value="Go to Home Page"/>
        </apex:pageBlockButtons>
    </apex:pageBlock>
</apex:form>
<apex:form id="activationForm" rendered="{!isAdmin}">
      <apex:actionFunction action="{!configureS3Credentials}" name="configureS3Credentials" />
      
      <apex:actionFunction action="{!configureS3EndPoint}" name="configureS3EndPoint" oncomplete="configureS3BucketName();" />
      <apex:actionFunction action="{!configureS3BucketName}" name="configureS3BucketName" />
 <apex:pageBlock id="manualActivationBlock">
    <apex:pageBlockButtons >
        <apex:commandButton value="Cancel" action="{!cancel}"/>
    </apex:pageBlockButtons>
      <apex:pageMessages />
       <apex:pageBlock id="configureS3CredentialsFailed" title=" Configure Amazon S3 Credentials">
        <!--<apex:pageMessages />-->
         <apex:pageBlockSection id="failedSection">
        <apex:pageBlockSectionItem helpText="Your Amazon S3 Account's Access Key">
          <apex:outputLabel value="Access Key" /><apex:inputText size="40" id="accessKey" value="{!formAccessKey}"  disabled="{!NOT(configurationOk)}"/>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem helpText="Your Amazon S3 Account's Secret Key">
          <apex:outputLabel value="Secret Key" /><apex:inputSecret size="40" id="secretKey" value="{!formSecretKey}" disabled="{!NOT(configurationOk)}"/>
        </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
        <apex:pageBlockButtons location="bottom">
            <apex:commandButton value="Configure Amazon S3 Credentials" id="configureCredentialsButton" onclick="javascript:configureS3Credentials();return false;" reRender="manualActivationBlock"></apex:commandButton>
        </apex:pageBlockButtons>
       </apex:pageBlock>
  
        <apex:pageBlock id="configureS3BucketNameOk" title="Configure Amazon S3 Bucket Name" rendered="{!NOT(changeBucketName)}">
            <font style="color: rgba(255, 165, 0, 0.5);"><strong>You can change your S3 bucket name after successfully configuring Amazon S3 credentials!</strong></font>
            <apex:pageBlockSection id="failedSection">
                <apex:pageBlockSectionItem helpText="Your Amazon S3 Account's Bucket Name" id="bucketSectionItem">
                  <apex:outputLabel value="Bucket Name" />
                    <apex:inputText size="40" id="bucketName" value="{!formBucketName}" disabled="true" />
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
       </apex:pageBlock>
       <!-- CloudFront cancelled
       <apex:pageBlock rendered="{!queryStringParam=='pk'}" title="Configure Amazon CloudFront Private Key">
            <font style="color: rgba(255, 165, 0, 0.5);"><strong>You can change Amazon CloudFront Private Key after successfully configuring Amazon S3 credentials!</strong></font>
            <apex:pageBlockSection >
           <apex:pageBlockSectionItem helpText="Amazon CloudFront Private Key. You can obtain the Private Key from AWS Management Console.">
                    <apex:outputLabel value="Private Key" />    
                    <apex:inputTextArea disabled="{!NOT(changeBucketName)}" rows="5" value="{!newPrivateKey}" cols="64" />
             </apex:pageBlockSectionItem>
             </apex:pageBlockSection>
             <apex:pageBlockButtons rendered="{!changeBucketName}" location="bottom">
            <apex:commandButton value="Save Private Key"   action="{!updatePK}"></apex:commandButton>
        </apex:pageBlockButtons>
       </apex:pageBlock>
       -->
       <apex:pageBlock id="configureS3BucketNameFailed" title="Configure Amazon S3 Bucket Name" rendered="{!changeBucketName}">
        <apex:pageBlockSection id="failedSection">
          <apex:actionStatus id="workingStatus" layout="block">
             <apex:facet name="stop">
                <apex:selectRadio layout="pageDirection" value="{!bucketOption}">    
                 <apex:selectOptions value="{!bucketOptions}"/>
                 <apex:actionSupport event="onchange" reRender="failedSection" status="workingStatus"/>
                </apex:selectRadio>
              </apex:facet>
              <apex:facet name="start">
              <apex:outputpanel style=" padding-left: 400px;" >
                <apex:outputLabel style="color: burlywood;font-weight: 600;" value="Processing..."></apex:outputLabel>
              </apex:outputpanel>
              </apex:facet>
            </apex:actionStatus>
            <br/>
              <apex:pageBlockSectionItem rendered="{!IF(bucketOption=='use'&&(userHasBuckets),true,false)}" helpText="Your Amazon S3 Account's Bucket Name" id="bucketSectionItem1">
                  <apex:outputLabel value="Bucket Name" />
                    <apex:selectList id="bucketSelectList" rendered="{!userHasBuckets}" value="{!bucketNames}" multiselect="false" size="1" >
                        <apex:selectOptions value="{!items}"/>
                    </apex:selectList>
              </apex:pageBlockSectionItem>
                      
                <apex:pageBlockSectionItem rendered="{!IF(bucketOption=='use'&&NOT(userHasBuckets),true,false)}" helpText="Your Amazon S3 Account's Bucket Name" id="bucketSectionItem3">
                     <apex:pageMessage summary="There is no existing S3 bucket. You should create new bucket." severity="warning" strength="3" />
                 </apex:pageBlockSectionItem>
    
                 <apex:pageBlockSectionItem rendered="{!IF(bucketOption=='create',true,false)}" helpText="Your Amazon S3 Account's Bucket Name" id="bucketSectionItem2">    
                     <apex:outputLabel value="Bucket Name" />
                     <apex:inputText size="40" id="bucketName" value="{!formBucketName}" />   
                  </apex:pageBlockSectionItem>


               <apex:pageBlockSectionItem rendered="{!IF(bucketOption=='create',true,false)}"  id="bucketSectionItem2_2">
                   <apex:outputLabel value="Region Name" />
                   <apex:selectList id="regionSelectList" value="{!s3EndPoint}" multiselect="false" size="1">
                      <apex:selectOptions value="{!regionItems}"/>
                   </apex:selectList>
               
              </apex:pageBlockSectionItem>

        </apex:pageBlockSection>
        <apex:pageBlockButtons location="bottom">
            <apex:commandButton value="Configure Amazon S3 Bucket Name" id="configureBucketButton" onclick="javascript:validateBucketName();return false;" reRender="manualActivationBlock"></apex:commandButton>
        </apex:pageBlockButtons>
       </apex:pageBlock>
  </apex:pageBlock>
</apex:form>
<script>

    // Create a namespace for our custom functions
    YAHOO.namespace("cyangate.com");

function validateBucketName()
{   
    var sb;
    var nb;
    if(document.getElementById('{!$Component.manualActivationPage.activationForm.manualActivationBlock.configureS3BucketNameFailed.failedSection.bucketSectionItem1.bucketSelectList}'))
    {
       sb = document.getElementById('{!$Component.manualActivationPage.activationForm.manualActivationBlock.configureS3BucketNameFailed.failedSection.bucketSectionItem1.bucketSelectList}').value;
       console.log('Bucket: ' + sb);
    }
    
    if(document.getElementById('{!$Component.manualActivationPage.activationForm.manualActivationBlock.configureS3BucketNameFailed.failedSection.bucketSectionItem2.bucketName}'))
    {
        nb = document.getElementById('{!$Component.manualActivationPage.activationForm.manualActivationBlock.configureS3BucketNameFailed.failedSection.bucketSectionItem2.bucketName}').value;
        console.log('Bucket: ' + nb);
    }
    
    var b;
    
    if((!sb)||sb=='')
    {
        if((!nb)||nb=='')
        {
            b = '';
        }
        else
        {
            b = nb;
        }
       
    }
    else
    {
        b = sb; 
    }
    
    
    var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);
    var ipAddress = new RegExp(/(\d+\.){3}\d+/);
    var dots = new RegExp(/\.\./);
    
    if(b.match(domain) && !b.match(ipAddress) && !b.match(dots))
    {
        //configureS3BucketName();
        configureS3EndPoint();
    }
    else
    {
        displayYUISimpleDialog('The given bucket name is Non-DNS-Compliant! Please refer to <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html">Amazon documents</a> for bucket name restrictions.');
    }
}

function displayYUISimpleDialog(message)
{
    var handleOK = function()
    {
        this.hide();
    };
    
    YAHOO.cyangate.com.errorDialog = 
        new YAHOO.widget.SimpleDialog("errorDialog", 
             { width: "300px",
               fixedcenter: true,
               visible: true,
               modal: true,
               draggable: true,
               close: false,
               hideaftersubmit: true,
               zIndex: 100,
               text: message,
               icon: YAHOO.widget.SimpleDialog.ICON_WARN,
               constraintoviewport: true,
               buttons: [{text:"OK", handler:handleOK, isDefault:true }]
             } );
    YAHOO.cyangate.com.errorDialog.render(document.body);
    YAHOO.cyangate.com.errorDialog.show();
}

    // Function called when the DOM is ready to create the dialog,
    // render the dialog into the document body, add our dialog skin
    // css to the body tag, and wire up the buttons on our dialog    
    YAHOO.cyangate.com.init = function() {
        document.body.className = document.body.className + " yui-skin-sam";
    }
    
    // Add the init method to the window.load event
    YAHOO.util.Event.addListener(window, "load", YAHOO.cyangate.com.init);

</script>
<style type="text/css">
    .pbTitle {
        white-space: nowrap
    }
</style>
</apex:page>